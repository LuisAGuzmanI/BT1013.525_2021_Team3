library(RGenetics)
genDNA <- function(n){
m <- sample(1:6, n, replace = TRUE) #1 = Citocina, 2 = Guanina, 3 = Adenina, 4 = Timina, 5 = Omitidos, 6 Desconocidos
for(i in 1:n){
if(m[i] == 1){m[i] <- 'C'}
else if(m[i] == 2){m[i] <- 'G'}
else if(m[i] == 3){m[i] <- 'A'}
else if(m[i] == 4){m[i] <- 'T'}
else if(m[i] == 5){m[i] <- '-'}
else if(m[i] == 6){m[i] <- 'N'}
}
return(m)
}
n <- 30 # Numero N
DNAseq <- genDNA(n)
print(DNAseq)
sizeOfDNA <- function(s){
return(length(s))
}
sizeSeq <- sizeOfDNA(DNAseq)
print(sizeSeq)
basePercentege <- function(seq_DNA){
charToNum <- c('C','G','A','T','-','N')
resVector <- c(1:6)
for(i in 1:6){
count <- 0
for(o in 1:length(seq_DNA)){
if(seq_DNA[o] == charToNum[i]){
count <- count + 1
}
}
resVector[i] <- paste(charToNum[i],': ',(count/length(seq_DNA))*100,'%',sep = '')
}
return(resVector)
}
percenteges <- basePercentege(DNAseq)
print(percenteges)
removeUnknowns <- function(vect){
vect <- vect[ vect != 'N' ]
vect <- vect[ vect != '-' ]
return(vect)
}
DNAtoRNA <- function(DNAseq){
RNAseq <- c(1:length(DNAseq))
for(i in 1:length(DNAseq)){
if(DNAseq[i] == 'C'){RNAseq[i] <- 'G'}
else if(DNAseq[i] == 'G'){RNAseq[i] <- 'C'}
else if(DNAseq[i] == 'A'){RNAseq[i] <- 'U'}
else if(DNAseq[i] == 'T'){RNAseq[i] <- 'A'}
else if(DNAseq[i] == '-'){RNAseq[i] <- '-'}
else if(DNAseq[i] == 'N'){RNAseq[i] <- 'N'}
}
return(RNAseq)
}
PolishedDNAseq <- removeUnknowns(DNAseq)
RNAseq <- DNAtoRNA(PolishedDNAseq)
#print(DNAseq)
print(PolishedDNAseq)
print(RNAseq)
RNAtoAminoacids <- function(vect){
iFor <- (length(vect)%/%3)
AminoChain <- c(1:iFor)
for(i in 1:iFor){
AminoChain[i] <- paste(vect[((i-1)*3)+1],vect[((i-1)*3)+2],vect[((i-1)*3)+3],sep = '')
}
RetAminoChain <- append(AminoChain, 'AUG',0)
return(RetAminoChain)
}
Aminoacids <- RNAtoAminoacids(RNAseq)
print(Aminoacids)
AminoacidsToProteins <- function(vect){
vectLen <- length(vect)
vectRet <- c(1:vectLen)
for(i in 1:vectLen){
currentAm <- codonToAAthreeRNA(vect[i])
if(currentAm == "Stop"){
vectRet <- vectRet[1:i-1]
break;
}
else{vectRet[i] <- currentAm}
}
return(vectRet)
}
proteinsSeq <- AminoacidsToProteins(Aminoacids)
print(Aminoacids)
print(proteinsSeq)
ForwardStrandsDNA <- function(DNA){
DNA<-append(DNA, '5\'-',0)
DNA<-append(DNA, '-3\'',length(DNA))
DNA<-paste(DNA[1:length(DNA)],collapse='')
return(DNA)
}
ReverseStrandsDNA <- function(DNA){
splits <- strsplit(DNA, "")[[1]]
DNA <- rev(splits)
DNA[1] <- '3'
DNA[2] <- '\''
DNA[3] <- '-'
DNA[length(DNA)] <- '\''
DNA[length(DNA)-1] <- '5'
DNA[length(DNA)-2] <- '-'
DNA <- paste(DNA[1:length(DNA)],collapse='')
return(DNA)
}
ForwardedStrands <- ForwardStrandsDNA(DNAseq)
ReversedStrand <- ReverseStrandsDNA(ForwardedStrands)
print(DNAseq)
print(ForwardedStrands)
print(ReversedStrand)
complementaryStrand <- function(forwardDNA){
splits <- strsplit(forwardDNA, "")[[1]]
compStrand <- c(1:length(splits))
for(i in 1:length(splits)){
if(splits[i] == 'C'){compStrand[i] <- 'G'}
else if(splits[i] == 'G'){compStrand[i] <- 'C'}
else if(splits[i] == 'A'){compStrand[i] <- 'T'}
else if(splits[i] == 'T'){compStrand[i] <- 'A'}
else if(splits[i] == '-'){compStrand[i] <- '-'}
else if(splits[i] == 'N'){compStrand[i] <- 'N'}
}
compStrand[1] <- '3'
compStrand[2] <- '\''
compStrand[3] <- '-'
compStrand[length(compStrand)] <- '\''
compStrand[length(compStrand)-1] <- '5'
compStrand[length(compStrand)-2] <- '-'
compStrand <- paste(compStrand[1:length(compStrand)],collapse='')
return(compStrand)
}
complementedStrand <- complementaryStrand(ForwardedStrands)
print(ForwardedStrands)
print(complementedStrand)
reverseComplement <- function(compStrand){
splits <- strsplit(compStrand, "")[[1]]
revComp <- rev(splits)
revComp[1] <- '5'
revComp[2] <- '\''
revComp[3] <- '-'
revComp[length(revComp)] <- '\''
revComp[length(revComp)-1] <- '3'
revComp[length(revComp)-2] <- '-'
revComp <- paste(revComp[1:length(revComp)],collapse='')
return(revComp)
}
reverseComplmentedStrand <- reverseComplement(complementedStrand)
print(complementedStrand)
print(reverseComplmentedStrand)
cat("Secuencia original: ",'\n',DNAseq,'\n','\n') #1
cat("TamaÃ±o: ",'\n',sizeSeq,'\n','\n') #2
cat("Porcentaes: ",'\n',percenteges,'\n','\n') #3
cat("Secuencia sin elementos omitidos ni desconocidos: ",'\n',PolishedDNAseq,'\n','\n') #4
cat("Secuencia traducida a RNA: ",'\n',RNAseq,'\n','\n') #4
cat("Secuancia interpretada como aminoacidos: ",'\n',Aminoacids,'\n','\n') #4.5
cat("Secuancia de proteinas: ",'\n',proteinsSeq,'\n','\n') #5
cat("Hebra directa: ",'\n',ForwardedStrands,'\n','\n') #6
cat("Hebra inversa: ",'\n',ReversedStrand,'\n','\n') #6
cat("Hebra complementaria: ",'\n',complementedStrand,'\n','\n') #7
cat("Hebra complementaria inversa: ",'\n',reverseComplmentedStrand,'\n','\n') #8
